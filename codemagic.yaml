workflows:
  ios-build:
    name: iOS Build
    instance_type: mac_mini_m1
    max_build_duration: 60

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true

    environment:
      # Используем automatic signing
      vars:
        TEAM_ID: 7LSL6C96XJ
        BUNDLE_ID: com.Workapp.SweetHome
      xcode: latest
      

    integrations:
      app_store_connect: "codemagic"  # имя интеграции из Codemagic UI

    scripts:
      - name: Check signing setup
        script: |
          # Проверяем доступные сертификаты
          echo "=== Available certificates ==="
          security find-identity -v -p codesigning
          
          # Проверяем App Store Connect интеграцию
          echo "=== App Store Connect status ==="
          app-store-connect get-latest-app-store-build-number "com.Workapp.SweetHome" || echo "App not found in App Store Connect"

      - name: Fetch and install signing files
        script: |
          # Получаем сертификаты и профили для App Store
          echo "=== Fetching signing files for App Store ==="
          app-store-connect fetch-signing-files "com.Workapp.SweetHome" \
            --type IOS_APP_STORE \
            --platform IOS \
            --create \
            --verbose
          
          # Добавляем сертификаты в keychain
          echo "=== Adding certificates to keychain ==="
          keychain add-certificates
          
          # Пытаемся получить дополнительные профили
          echo "=== Fetching all available profiles ==="
          app-store-connect fetch-signing-files "com.Workapp.SweetHome" \
            --type IOS_APP_STORE \
            --platform IOS \
            --create \
            --verbose || echo "Warning: Could not fetch additional profiles"
          
          # Переходим в директорию проекта и применяем профили
          echo "=== Applying profiles ==="
          cd SweetHome
          xcode-project use-profiles --team-id $TEAM_ID
          
          # Проверяем доступные профили
          echo "=== Available provisioning profiles ==="
          find ~/Library/MobileDevice/Provisioning\ Profiles/ -name "*.mobileprovision" -exec bash -c '
            echo "=== Profile: $(basename "$1") ==="
            PROFILE_INFO=$(security cms -D -i "$1")
            echo "Name: $(echo "$PROFILE_INFO" | /usr/libexec/PlistBuddy -c "Print :Name" /dev/stdin 2>/dev/null || echo "Unknown")"
            echo "Bundle ID: $(echo "$PROFILE_INFO" | /usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /dev/stdin 2>/dev/null || echo "Unknown")"
            echo "Type: $(echo "$PROFILE_INFO" | /usr/libexec/PlistBuddy -c "Print :ProvisionedDevices" /dev/stdin 2>/dev/null >/dev/null && echo "Development" || echo "Distribution")"
            echo ""
          ' _ {} \; 2>/dev/null || echo "No profiles found"
          
          # Проверяем настройки проекта
          echo "=== Project signing settings ==="
          xcodebuild -project "SweetTown.xcodeproj" -scheme "SweetTown" -showBuildSettings | grep -E "(CODE_SIGN|PROVISIONING_PROFILE|DEVELOPMENT_TEAM)"

      - name: Build iOS app (Release, App Store)
        script: |
          set -e # Останавливать скрипт при любой ошибке
          cd SweetHome

          # --- Шаг 1: Архивация ---
          echo "=== Archiving the project ==="
          xcodebuild \
            -project "SweetTown.xcodeproj" \
            -scheme "SweetTown" \
            -configuration "Release" \
            -destination "generic/platform=iOS" \
            -archivePath "build/SweetTown.xcarchive" \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            archive

          # --- Шаг 2: Подготовка к экспорту ---
          echo "=== Preparing for export ==="
          
          # Находим правильный профиль для App Store
          echo "=== Searching for App Store provisioning profile ==="
          PROVISIONING_PROFILE_PATH=""
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
              PROFILE_BUNDLE_ID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' /dev/stdin <<< $(security cms -D -i "$profile"))
              # Убираем префикс TEAM_ID из Bundle ID профиля
              PROFILE_BUNDLE_ID="${PROFILE_BUNDLE_ID#*.}"

              # Проверяем, что это профиль дистрибуции (нет списка устройств)
              if ! /usr/libexec/PlistBuddy -c 'Print :ProvisionedDevices' /dev/stdin <<< $(security cms -D -i "$profile") >/dev/null 2>&1; then
                  if [ "$PROFILE_BUNDLE_ID" == "$BUNDLE_ID" ]; then
                      PROVISIONING_PROFILE_PATH="$profile"
                      echo "Found matching App Store profile: $profile"
                      break
                  fi
              fi
          done

          if [ -z "$PROVISIONING_PROFILE_PATH" ]; then
              echo "Error: App Store provisioning profile for $BUNDLE_ID not found."
              exit 1
          fi

          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i "$PROVISIONING_PROFILE_PATH"))
          
          echo "Found App Store profile with UUID: $PROFILE_UUID"

          # --- Шаг 3: Создание exportOptions.plist ---
          echo "=== Creating exportOptions.plist ==="
          cat > "build/exportOptions.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$TEAM_ID</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_UUID</string>
              </dict>
          </dict>
          </plist>
          EOF

          echo "exportOptions.plist content:"
          cat "build/exportOptions.plist"

          # --- Шаг 4: Экспорт IPA ---
          echo "=== Exporting IPA ==="
          xcodebuild \
            -exportArchive \
            -archivePath "build/SweetTown.xcarchive" \
            -exportPath "build/ios/ipa" \
            -exportOptionsPlist "build/exportOptions.plist"
          
          echo "✅ IPA file created successfully"

    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - /tmp/xcodebuild_archive/*.xcarchive

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        # Закомментируйте submit_to_app_store пока не готовы к релизу
        # submit_to_app_store: true
